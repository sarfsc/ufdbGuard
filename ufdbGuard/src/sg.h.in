/*
 * ufdbGuard is copyrighted (C) 2005-2017 by URLfilterDB B.V. with all rights reserved.
 *
 * Parts of the ufdbGuard daemon are based on squidGuard.
 * squidGuard is copyrighted (C) 1998 by
 * ElTele Øst AS, Oslo, Norway, with all rights reserved.
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License (version 2) as
 * published by the Free Software Foundation.  It is distributed in the
 * hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License (GPL) for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * (GPL) along with this program.
 *
 * $Id: sg.h.in,v 1.78 2018/07/25 13:44:01 root Exp root $
 */

#ifndef _REENTRANT
#define _REENTRANT
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _XOPEN_SOURCE
#ifdef __sun
#define _XOPEN_SOURCE 600
#else
#define _XOPEN_SOURCE  600
#endif
#endif

#if __sun && !defined(__EXTENSIONS__)
#define __EXTENSIONS__ 1
#endif

#if 0
#ifndef _XOPEN_SOURCE_EXTENDED
#define _XOPEN_SOURCE_EXTENDED  1
#endif
#endif

#if 0
#ifndef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200112L
#endif
#endif

#ifndef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1
#endif

#ifndef _BSD_SOURCE
#define _BSD_SOURCE 1
#endif

#define YY_NEVER_INTERACTIVE 1

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>
#include <sys/types.h>
#include <arpa/inet.h>
#include <netinet/in.h>

#include "config.h"

#include "version.h"

#include "ufdb.h"
#include "ufdblib.h"

#if __STDC__
# ifndef __P
#  define __P(x) x
# endif
#else
# ifndef __P
#  define __P(x) ()
# endif
# ifndef const
#  define const
# endif
int tolower();
#endif

#ifndef ulong
# define ulong unsigned long
#endif

#define T_WEEKLY      1
#define T_WEEKDAY     2
#define T_TVAL        3
#define T_DVAL        4
#define T_DVALCRON    5

#define ACL_TYPE_DEFAULT    1
#define ACL_TYPE_TERMINATOR 2
#define ACL_TYPE_INADDR     3

#define MAX_BUF 8192

#define INVALID_IP_ADDR 1

#define SG_IPTYPE_HOST  1
#define SG_IPTYPE_RANGE 2
#define SG_IPTYPE_CIDR  3
#define SG_IPTYPE_CLASS 4

#define SG_IPV6TYPE_HOST 5
#define SG_IPV6TYPE_CIDR 6

#define SG_BLOCK_DESTINATION 1
#define SG_BLOCK_SOURCE      2
#define SG_BLOCK_REWRITE     3
#define SG_BLOCK_ACL         4

#define REDIRECT_PERMANENT   "301:"
#define REDIRECT_TEMPORARILY "302:"


struct LogFile
{
  char * parent_name;
  int    parent_type;
  int    anonymous;
  struct LogFileStat * stat;
};


struct UserQuotaInfo
{
  time_t time;
  time_t last;
  int    consumed;
  int    status;
};

#define UDFB_Q_STAT_FIRSTTIME  0
#define UDFB_Q_STAT_ACTIVE     1
#define UDFB_Q_STAT_TIMEISUP   2

struct UserQuota
{
   time_t seconds;
   int    renew;
   time_t sporadic;
};

struct SquidInfo 
{
   char                 channelid[16];
   char                 protocol[16];
   char                 method[16];
   int                  worker;
   int                  url_has_ipv4;
   int                  url_has_ipv6;
   int                  source_isipv4;
   int                  source_isipv6;
   unsigned int         source_ipv4;
   struct in6_addr      source_ipv6;
   int                  islocalnet;
   int                  port;
   int		        blockReason;
   int                  matchedAny;
   int                  matchedNone;
   int		        bumping;
   int                  BlockedBumpedConnectAllowed;
   UFDBrevURL *         revUrl;
   struct AclCategory * aclpass;
   char                 bump_mode[32];
   UFDB_GCC_ALIGN64
   char		        referer[128];
   char                 srcIP[128];
   char                 srcDomain[256];
   char                 sni[256];
   char                 cert_issuer[256];
   char                 cert_subject[256];
   char                 matchedBy[256];
   char                 ident[256];
   char                 urlgroup[256];
   char                 domain[512];
   char                 orig_domain[512];
   char                 url2display[2048];
   char                 url2log[2048];
   char                 orig[16*1024];
   char                 url[16*1024];
   char                 surl[16*1024];	
};


struct sgRewrite
{
   char *              name;
   int                 active;
   struct ufdbRegExp * rewrite;
   struct ufdbTime *   time;
   int                 within;
   struct sgRewrite *  next;
};

#define SGDBTYPE_DOMAINLIST     1
#define SGDBTYPE_URLLIST        2
#define SGDBTYPE_USERLIST       3
#define SGDBTYPE_EXECUSERLIST   4

struct sgDb
{
   char *   dbhome;
   void *   dbcp;
   int      entries;	
   int      type;
};

struct Ipv4
{
   int           type;
   int           net_is_set;
   unsigned int  net;
   unsigned int  mask;
   char *        str;
   struct Ipv4 * next;
};

struct Ipv6
{
   int              type;
   unsigned int     cidr;
   struct in6_addr  ipv6;
   char *           str;
   struct Ipv6 *    next;
};

struct Setting
{
   char *           name;
   char *           value;
   struct Setting * next;
};

struct TimeElement 
{
   int    wday;
   int    from;
   int    to;
   int    y;
   int    m;
   int    d;
   time_t fromdate;
   time_t todate;
   struct TimeElement * next;
};

struct ufdbTime 
{
   char *               name;
   int                  active;
   struct TimeElement * element;
   struct ufdbTime *    next;
};

struct Category 
{
   volatile unsigned long nmatches;	/* hot variable */
   int                    active;
   int                    options;
   int                    within;
   int                    blockBumpedConnect;
   char *                 name;
   char *                 domainlist;
   struct sgDb *          domainlistDb;
   char *                 execdomainlist;
   char *                 expressionlist;
   struct ufdbRegExp *    regExp;
   char *                 redirect;
   struct ufdbTime *      time;
   struct sgRewrite *     rewrite;
   char *                 cse;		/* category-specific extension */
   char *                 cse2;		/* category-specific extension */
   volatile unsigned long nblocks;	/* hot variable */
   struct Category *      next;
};


struct Source 
{
   volatile unsigned long nmatches;	/* hot variable */
   int                    active;
   int                    within;
   int                    evaluationMethod;
   char *                 name;
   struct Ipv4 *          ipv4;
   struct Ipv4 *          lastipv4;
   struct Ipv6 *          ipv6;
   struct Ipv6 *          lastipv6;
   struct sgDb *          domainDb;
   struct sgDb *          userDb;
   struct ufdbTime *      time;
   char *                 sarg0;
   struct UserQuota       userquota;
   int                    cont_search;
   volatile unsigned long nblocks;	/* hot variable */
   struct Source *        next;
};


struct Acl 
{
   char *               name;
   int                  active;
   int                  within;
   struct Source *      source;
   struct AclCategory * pass;
   struct AclCategory * implicitPass;		/* has all defined categories which are not in 'pass' */
   int                  hasTerminatorNone;
   int                  rewriteDefault;
   struct sgRewrite *   rewrite;
   char *               redirect;
   struct ufdbTime *    time;
   struct Acl *         next;
};


struct AclCategory
{
   volatile unsigned long nmatches;		/* hot variable */
   char *                 name;
   struct Category *      cat;
   int                    access;
   int                    type;
   struct AclCategory *   next;
   char                   dummy[24];
   volatile unsigned long nblocks;		/* hot variable */
};


extern int lineno;

char * sgParseRedirect( char *, struct SquidInfo *, struct Acl *, struct AclCategory *, char * );

int    sgReadConfig( char * file );
void   sgReloadConfig __P((void));

int    parseLine __P(( UFDBthreadAdmin *, char *, struct SquidInfo * ));

void   sgHandlerSigHUP __P((int));
void   sgSignalHandler __P((int));
void   sgAlarm __P((int));
unsigned int * sgConvDot __P(( const char *, unsigned int * ));
int    sgValidateIPv6 ( const char * str, struct in6_addr * ipv6addr );
int    ufdbIPv6hostInNet( struct in6_addr * host, struct in6_addr * net, int cidr );

void   ufdbSourceUser __P((char *));
void   ufdbSourceUserList __P((char *));
void   ufdbSourceExecUserList __P((char *));

#define UFDB_MAX_USERLISTS	300
struct sgDb * UFDBretrieveExecUserlist( char * command );
void UFDBrefreshExecUserlist( char * command );

void   defSource __P((char *));
void   defSourceEnd __P((void));
void   defSourceDomain __P((char *));
void   defSourceIPV4List __P((char *));
void   defSourceIPV6List __P((char *));
void   defSourceTime __P((char *, int));
void   ufdbSourceEval( int method  );

void   UFDBaclEngineInit __P(( void ));
struct Source * defSourceFindName __P(( char * ));
struct Source * UFDBfindSource __P(( struct Source *, struct SquidInfo * ));
struct Acl * UFDBfindACLbySource __P(( struct Source *, struct SquidInfo * ));
int    UFDBCheckACLaccess  __P(( int, struct Acl *, struct SquidInfo *, char * ));
int    UFDBdecideAccessBasedOnURL __P(( int reconfiguring, struct Acl * acl, struct SquidInfo * si, char * redirectURL ));
int    UFDBdecideImplicitAccessBasedOnURL __P(( int reconfiguring, struct Acl * acl, struct SquidInfo * si, char * redirectURL ));
int    UFDBdecideAccessByPeekStatus( int status, struct Acl * acl, struct SquidInfo * si, char * redirectURL );
int    UFDBdecideAccessBasedOnHostname __P(( int reconfiguring, struct Acl * acl, struct SquidInfo * si, UFDBthreadAdmin * admin, char * hostname, char * redirectURL ));
int    UFDBdecideBasedOnSpecificCategory __P(( struct Acl * acl, struct AclCategory * aclpass, struct SquidInfo * si, UFDBrevURL * revURL, char * redirectURL, int matchRE ));
int    UFDBdecideAccessBasedOnCategory __P(( struct Acl * acl, struct SquidInfo * si, char * category, char * redirectURL ));
int    UFDBurlIsSafeCategory __P(( struct SquidInfo * si ));


void   BuildImplicitPassLists __P(( void ));

void   ufdbCategory __P((char *));
void   ufdbCategoryEnd __P((void));
void   ufdbCategoryDomainList __P((char *));
struct sgDb * UFDBretrieveExecDomainlist __P(( struct Category * cat ));
void   ufdbCategoryExecDomainList __P((char *));
void   ufdbCategoryUrlList __P((char *));
void   ufdbCategoryCACertsFile __P((char *));
void   ufdbCategoryCACertsDir __P((char *));
void   ufdbCategoryExpressionList __P((char *, const char *));
void   ufdbCategoryRedirect __P((char *));
void   ufdbCategoryRewrite __P((char *));
struct Category * ufdbCategoryFindName __P((char *));
void   ufdbCategoryBlockConnect( int flag  );
void   ufdbCategoryTime __P((char *, int));
void   ufdbCategoryOption __P(( int, int ));

void   sgSetting __P((char *, char *));
struct Setting *sgSettingFindName __P((char *));
char   *sgSettingGetValue __P((char *));

void   sgRewrite __P((char *));
void   sgRewriteSubstitute __P((char *));
struct sgRewrite *sgRewriteFindName __P((char *));
char * sgRewriteExpression __P(( struct sgRewrite *, char *, char * ));
void   sgRewriteTime __P((char *, int));

void   sgTime __P((char *));
struct ufdbTime * sgTimeFindName __P((char *));
void   sgTimeElementInit __P((void));
void   sgTimeElementSortEvents __P((void));
void   sgTimeElementAdd __P((char *, char));
void   sgTimeElementEnd __P((void));
void   sgTimeElementClone __P((void));

void   sgSetIpType __P((int, char *, int));
void   sgIpv4 __P(( const char * name ));
struct Ipv4 * sgIpv4Last __P((struct Source *));

void   sgIpv6( const char * name, int type, char * file, int line );
struct Ipv6 * sgIpv6Last( struct Source * );

void   sgAcl __P((char *, char *, int));
struct Acl * sgAclFindName __P((char *));
void   sgAclSetValue __P(( const char * what, char * value, int allowed ));

char * ufdbRegExpSubst __P(( struct ufdbRegExp *, char *, char * ));

void   sgDbInit __P((struct sgDb * Db, char * file));
void   sgDbLoadTextFile __P((struct sgDb *, char *, int));
void   sgDbUpdate __P((struct sgDb *, char *, char *, size_t));

void   ufdbFreeDomainDb __P(( struct sgDb * dbp ));

time_t date2sec __P((char *));
time_t iso2sec __P((char *));
void   niso __P(( time_t, char * ));
struct UserQuotaInfo * setuserquota __P(( struct UserQuotaInfo * ));
void sgSourceUserQuota __P((char *, char *, char *));

char * sgStrdup __P(( const char * ));

int    defined __P((struct sgDb *, char *, char **));
int    sgDbLookup __P((struct sgDb *, char *, char **));

void   yyerror __P((char *));
int    yyparse __P((void));
int    yylex __P((void));

#ifdef __cplusplus
}
#endif

